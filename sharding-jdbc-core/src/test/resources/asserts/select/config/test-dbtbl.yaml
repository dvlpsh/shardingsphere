
shardingRule:
  defaultDataSourceName: dbtbl_0

  defaultKeyGeneratorClass: io.shardingjdbc.dbtest.core.yaml.fixture.IncrementKeyGenerator

  tables:

    t_order:
      actualDataNodes: dbtbl_${0..9}.t_order_${0..9}
      databaseStrategy:
        standard:
          shardingColumn: user_id
          preciseAlgorithmClassName: io.shardingjdbc.dbtest.core.yaml.fixture.SingleAlgorithm
          rangeAlgorithmClassName: io.shardingjdbc.core.fixture.RangeOrderShardingAlgorithm
      tableStrategy:
        inline:
          shardingColumn: order_id
          algorithmExpression: t_order_${order_id % 2}
    t_order_item:
      actualDataNodes: dbtbl_${0..9}.t_order_item_${0..9}
      keyGeneratorColumnName: order_item_id
      keyGeneratorClass: io.shardingjdbc.dbtest.core.yaml.fixture.DecrementKeyGenerator
      #绑定表中其余的表的策略与第一张表的策略相同
      databaseStrategy:
        standard:
          shardingColumn: user_id
          preciseAlgorithmClassName: io.shardingjdbc.dbtest.core.yaml.fixture.SingleAlgorithm
      tableStrategy:
        inline:
          shardingColumn: order_id
          algorithmExpression: t_order_item_${order_id % 2}

  bindingTables:
    - t_order,t_order_item

  #默认数据库分片策略
  defaultDatabaseStrategy:
    complex:
        shardingColumns: order_id, user_id
        algorithmClassName: io.shardingjdbc.dbtest.core.yaml.fixture.MultiAlgorithm
  defaultTableStrategy:
    complex:
      shardingColumns: order_id
      algorithmClassName: io.shardingjdbc.dbtest.core.yaml.fixture.MultiAlgorithm
  props:
      sql.show: true