shardingRule:
  tables:
    t_order: 
      actualDataNodes: db_ms_${0..1}.t_order_${0..1}
      databaseStrategy: 
        standard:
          shardingColumn: user_id
          preciseAlgorithmClassName: db_ms_${order_id % 2}
      tableStrategy: 
        inline:
          shardingColumn: order_id
          algorithmExpression: t_order_${order_id % 2}
      keyGeneratorColumnName: order_id
      keyGeneratorClassName: io.shardingsphere.shardingjdbc.orchestration.api.yaml.fixture.IncrementKeyGenerator
  bindingTables:
    - t_order,t_order_item
  masterSlaveRules:
    db_ms_0:
      masterDataSourceName: db0_master
      slaveDataSourceNames:
        - db0_slave
    db_ms_1:
      masterDataSourceName: db1_master
      slaveDataSourceNames:
        - db1_slave

orchestration:
  name: demo_ds_ms
  registry:
    serverLists: localhost:3181
    namespace: orchestration-yaml-test




tables:
  t_order:
    actualDataNodes: db_ms_${0..1}.t_order_${0..1}
    databaseStrategy:
      standard:
        shardingColumn: user_id
        preciseAlgorithmClassName: db_ms_${order_id % 2}
    tableStrategy:
      inline:
        shardingColumn: order_id
        algorithmExpression: t_order_${order_id % 2}
    keyGeneratorColumnName: order_id
    keyGeneratorClassName: io.shardingsphere.shardingjdbc.orchestration.api.yaml.fixture.IncrementKeyGenerator
bindingTables:
  - t_order,t_order_item
masterSlaveRules:
  db_ms_0:
    masterDataSourceName: db0_master
    slaveDataSourceNames:
      - db0_slave
  db_ms_1:
    masterDataSourceName: db1_master
    slaveDataSourceNames:
      - db1_slave