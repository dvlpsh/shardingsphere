/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.shardingsphere.shardingjdbc.jdbc.core.statement;

import lombok.RequiredArgsConstructor;
import org.apache.shardingsphere.core.constant.properties.ShardingPropertiesConstant;
import org.apache.shardingsphere.core.metadata.table.TableMetaData;
import org.apache.shardingsphere.core.metadata.table.TableMetas;
import org.apache.shardingsphere.core.rewrite.context.SQLRewriteContext;
import org.apache.shardingsphere.core.rewrite.engine.impl.DefaultSQLRewriteEngine;
import org.apache.shardingsphere.core.rewrite.feature.shadow.ShadowJudgementEngine;
import org.apache.shardingsphere.core.rewrite.feature.shadow.SimpleJudgementEngine;
import org.apache.shardingsphere.core.rewrite.feature.shadow.context.ShadowSQLRewriteContextDecorator;
import org.apache.shardingsphere.core.route.SQLLogger;
import org.apache.shardingsphere.shardingjdbc.jdbc.adapter.AbstractStatementAdapter;
import org.apache.shardingsphere.shardingjdbc.jdbc.core.connection.ShadowConnection;
import org.apache.shardingsphere.sql.parser.relation.SQLStatementContextFactory;
import org.apache.shardingsphere.sql.parser.relation.metadata.RelationMetaData;
import org.apache.shardingsphere.sql.parser.relation.metadata.RelationMetas;
import org.apache.shardingsphere.sql.parser.relation.statement.SQLStatementContext;
import org.apache.shardingsphere.sql.parser.sql.statement.SQLStatement;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;

/**
 * Shadow statement.
 *
 * @author zhyee
 */
public final class ShadowStatement extends AbstractStatementAdapter {

    private final ShadowConnection shadowConnection;

    private final ShadowStatementGenerator shadowStatementGenerator;

    private SQLStatementContext sqlStatementContext;

    private ResultSet resultSet;

    private Statement statement;

    public ShadowStatement(final ShadowConnection shadowConnection) {
        this(shadowConnection, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
    }

    public ShadowStatement(final ShadowConnection shadowConnection, final int resultSetType, final int resultSetConcurrency) {
        this(shadowConnection, resultSetType, resultSetConcurrency, ResultSet.HOLD_CURSORS_OVER_COMMIT);
    }

    public ShadowStatement(final ShadowConnection shadowConnection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {
        super(Statement.class);
        this.shadowConnection = shadowConnection;
        this.shadowStatementGenerator = new ShadowStatementGenerator(shadowConnection, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public ResultSet executeQuery(final String sql) throws SQLException {
        this.resultSet = getStatementAndReplay(sql).executeQuery(rewriteSql(sql));
        return resultSet;
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return statement.getGeneratedKeys();
    }

    @Override
    public int executeUpdate(final String sql) throws SQLException {
        return getStatementAndReplay(sql).executeUpdate(rewriteSql(sql));
    }

    @Override
    public int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
        return getStatementAndReplay(sql).executeUpdate(rewriteSql(sql), autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(final String sql, final int[] columnIndexes) throws SQLException {
        return getStatementAndReplay(sql).executeUpdate(rewriteSql(sql), columnIndexes);
    }

    @Override
    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
        return getStatementAndReplay(sql).executeUpdate(rewriteSql(sql), columnNames);
    }

    @Override
    public boolean execute(final String sql) throws SQLException {
        boolean result = getStatementAndReplay(sql).execute(rewriteSql(sql));
        this.resultSet = statement.getResultSet();
        return result;
    }

    @Override
    public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
        boolean result = getStatementAndReplay(sql).execute(rewriteSql(sql), autoGeneratedKeys);
        this.resultSet = statement.getResultSet();
        return result;
    }

    @Override
    public boolean execute(final String sql, final int[] columnIndexes) throws SQLException {
        boolean result = getStatementAndReplay(sql).execute(rewriteSql(sql), columnIndexes);
        this.resultSet = statement.getResultSet();
        return result;
    }

    @Override
    public boolean execute(final String sql, final String[] columnNames) throws SQLException {
        boolean result = getStatementAndReplay(sql).execute(rewriteSql(sql), columnNames);
        this.resultSet = statement.getResultSet();
        return result;
    }

    @Override
    public ResultSet getResultSet() {
        return resultSet;
    }

    @Override
    public int getResultSetConcurrency() {
        return shadowStatementGenerator.resultSetConcurrency;
    }

    @Override
    public int getResultSetType() {
        return shadowStatementGenerator.resultSetType;
    }

    @Override
    public Connection getConnection() {
        return shadowStatementGenerator.connection;
    }

    @Override
    public int getResultSetHoldability() {
        return shadowStatementGenerator.resultSetHoldability;
    }

    @Override
    protected boolean isAccumulate() {
        return false;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected Collection<Statement> getRoutedStatements() {
        Collection<Statement> result = new LinkedList();
        if (null == statement) {
            return result;
        }
        result.add(statement);
        return result;
    }

    private Statement getStatementAndReplay(final String sql) throws SQLException {
        SQLStatement sqlStatement = shadowConnection.getRuntimeContext().getParseEngine().parse(sql, false);
        sqlStatementContext = SQLStatementContextFactory.newInstance(getRelationMetas(shadowConnection.getRuntimeContext().getTableMetas()), sql, Collections.emptyList(), sqlStatement);
        ShadowJudgementEngine shadowJudgementEngine = new SimpleJudgementEngine(shadowConnection.getRuntimeContext().getRule(), sqlStatementContext);
        statement = shadowStatementGenerator.createStatement(shadowJudgementEngine);
        return statement;
    }

    private RelationMetas getRelationMetas(final TableMetas tableMetas) {
        Map<String, RelationMetaData> result = new HashMap<>(tableMetas.getAllTableNames().size());
        for (String each : tableMetas.getAllTableNames()) {
            TableMetaData tableMetaData = tableMetas.get(each);
            result.put(each, new RelationMetaData(tableMetaData.getColumns().keySet()));
        }
        return new RelationMetas(result);
    }

    private String rewriteSql(final String sql) {
        SQLRewriteContext sqlRewriteContext = new SQLRewriteContext(shadowConnection.getRuntimeContext().getTableMetas(), sqlStatementContext, sql, Collections.emptyList());
        new ShadowSQLRewriteContextDecorator(shadowConnection.getRuntimeContext().getRule()).decorate(sqlRewriteContext);
        sqlRewriteContext.generateSQLTokens();
        String result = new DefaultSQLRewriteEngine().rewrite(sqlRewriteContext).getSql();
        showSQL(result);
        return result;
    }

    private void showSQL(final String sql) {
        boolean showSQL = shadowConnection.getRuntimeContext().getProps().<Boolean>getValue(ShardingPropertiesConstant.SQL_SHOW);
        if (showSQL) {
            //todo
            SQLLogger.logShadowSQL(sql, "");
        }
    }

    @RequiredArgsConstructor
    private final class ShadowStatementGenerator {

        private final ShadowConnection connection;

        private final int resultSetType;

        private final int resultSetConcurrency;

        private final int resultSetHoldability;

        private Statement createStatement(final ShadowJudgementEngine shadowJudgementEngine) throws SQLException {
            if (-1 != resultSetType && -1 != resultSetConcurrency && -1 != resultSetHoldability) {
                return shadowJudgementEngine.isShadowSql() ? connection.getShadowConnection().createStatement(resultSetType, resultSetConcurrency, resultSetHoldability)
                        : connection.getActualConnection().createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
            }
            if (-1 != resultSetType && -1 != resultSetConcurrency) {
                return shadowJudgementEngine.isShadowSql() ? connection.getShadowConnection().createStatement(resultSetType, resultSetConcurrency)
                        : connection.getActualConnection().createStatement(resultSetType, resultSetConcurrency);
            }
            return shadowJudgementEngine.isShadowSql() ? connection.getShadowConnection().createStatement()
                    : connection.getActualConnection().createStatement();
        }
    }
}
