<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分布式事务 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/cn/features/transaction/</link>
    <description>Recent content in 分布式事务 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/cn/features/transaction/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>本地事务</title>
      <link>https://shardingsphere.apache.org/document/current/cn/features/transaction/local-transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/features/transaction/local-transaction/</guid>
      <description> 功能  完全支持非跨库事务，例如：仅分表，或分库但是路由的结果在单库中。
 完全支持因逻辑异常导致的跨库事务。例如：同一事务中，跨两个库更新。更新完毕后，抛出空指针，则两个库的内容都能回滚。
 不支持因网络、硬件异常导致的跨库事务。例如：同一事务中，跨两个库更新，更新完毕后、未提交之前，第一个库宕机，则只有第二个库数据提交。
  支持情况  Sharding-JDBC可以支持由用户自行配置不使用XA数据源
 Sharding-Proxy无需支持，使用XA或柔性事务即可
  </description>
    </item>
    
    <item>
      <title>两阶段事务-XA</title>
      <link>https://shardingsphere.apache.org/document/current/cn/features/transaction/2pc-transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/features/transaction/2pc-transaction/</guid>
      <description> 概念 ﻿两阶段事务提交采用的是X/OPEN组织所定义的DTP模型，通过抽象出来的AP, TM, RM的概念可以保证事务的强一致性。其中TM和RM间采用XA的协议进行双向通信，与传统的本地事务相比，多了一个prepare阶段，数据库除了被动接受提交指令外，还可以反向通知调用方事务是否可以被提交，因此TM可以收集所有分支事务的prepare结果，最后进行原子的提交，保证事务的强一致性。
﻿Java通定义JTA接口实现了XA的模型，JTA接口里的ResourceManager需要数据库厂商提供XA的驱动实现，而TransactionManager则需要事务管理器的厂商实现，传统的事务管理器需要同应用服务器绑定，因此使用的成本很高。而嵌入式的事务管器可以已jar包的形式提供服务，同ShardingSphere集成后，可保证分片后跨库事务强一致性。
﻿通常，只有使用了事务管理器厂商所提供的XA事务连接池，才能支持XA的事务。ShardingSphere整合XA事务时，分离了XA事务管理和连接池管理，这样接入XA时，可以做到对业务的零侵入。
功能  支持数据分片后的跨库XA事务. 两阶段提交保证操作的原子性和数据的强一致性 服务宕机重启后，提交/回滚中的事务可自动恢复 SPI机制整合主流的XA事务管理器，默认Atomikos，可以选择使用narayana和bitronix 同时支持XA和非XA的连接池 提供spring-boot和namespace的接入端 proxy原生支持XA事务  实现原理 ShardingSphere里定义了分布式事务的SPI接口ShardingTransactionManager，Sharding-JDBC和Sharding-Proxy为分布式事务的两个接入端。XAShardingTransactionManager为分布式事务的XA实现类，通过引入sharding-transaction-xa-core依赖，即可加入ShardingSphere的分布式事务生态中。XAShardingTransactionManager主要负责对actual datasource进行管理和适配，并且将接入端事务的begin/commit/rollback操作委托给具体的XA事务管理器。
处理流程 1. begin 通常收到接入端的set autoCommit=0时，XAShardingTransactionManager会调用具体的XA事务管理器开启XA的全局事务，通常以XID的形式进行标记。
2. SQL执行 ShardingSphere进行解析/优化/路由后，会生成逻辑SQL的分片SQLUnit，执行引擎为每个物理SQL创建连接的同时，物理连接所对应的XAResource也会被注册到当前XA事务中，事务管理器会在此阶段发送XAResource.start命令给数据库，数据库在收到XAResource.end命令之前的所有SQL操作，会被标记为XA事务。
例如:
XAResource1.start -- enlist阶段执行 statement.execute(&amp;quot;sql1&amp;quot;); statement.execute(&amp;quot;sql2&amp;quot;); XAResource1.end -- 提交阶段执行  这里sql1和sql2将会被标记为XA事务.
3. commit/rollback XAShardingTransactionManager收到接入端的提交命令后，会委托实际的XA事务管理进行提交动作，这时事务管理器会收集当前线程里所有注册的XAResource，首先发送XAResource.end指令，用以标记此XA事务的边界。接着会依次发送prepare指令，收集所有参与XAResource投票，如果所有XAResource的反馈结果都是OK，则会再次调用commit指令进行最终提交，如果有一个XAResource的反馈结果为No，则会调用rollback指令进行回滚。在事务管理器发出提交指令后，任何XAResource产生的异常都会通过recovery日志进行重试，来保证提交阶段的操作原子性，和数据强一致性。
例如:
XAResource1.prepare -- ack: yes XAResource2.prepare -- ack: yes XAResource1.commit XAResource2.commit XAResource1.prepare -- ack: yes XAResource2.prepare -- ack: no XAResource1.rollback XAResource2.rollback  example  transaction-xa-raw-jdbc-example transaction-xa-spring-namespace-example transaction-xa-spring-boot-example  </description>
    </item>
    
    <item>
      <title>柔性事务</title>
      <link>https://shardingsphere.apache.org/document/current/cn/features/transaction/base-transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/features/transaction/base-transaction/</guid>
      <description>功能  完全支持跨库事务。 支持失败SQL重试及最大努力送达。 支持反向SQL、自动生成更新快照以及自动补偿。 默认使用关系型数据库进行快照及事务日志的持久化，支持使用SPI的方式加载其他类型的持久化。 暂不支持资源隔离。  设计 ShardingSphere的柔性事务需要实现Sharding事务管理器的SPI接口，用于管理事务的生命周期。 同时柔性事务还需要通过ShardingSphere的内部SQL Hook，获取与SQL相关的必要信息，帮助事务管理器控制分布式事务。 事务隔离引擎还处于计划阶段，因此柔性事务暂不支持资源隔离功能。
支持情况 ShardingSphere的柔性事务已通过第三方SPI实现Saga事务，Saga引擎使用Servicecomb-Saga。
Saga事务 为了更好地理解柔性事务的设计思路，需要先解释数个概念
 分支事务(BranchTransaction)： 分布式事务中，被路由到不同节点的实际SQL。 分支事务组(BranchTransactionGroup)： 分布式事务中，由同一个逻辑SQL生成的分支事务的组合。  当ShardingSphere对SQL进行解析时，事务引擎会将当前事务切换到新的分支事务组。 在开始并行执行路由后的实际SQL前，事务引擎会对这些SQL进行快照并注册对应分支事务到当前的分支事务组中。 当事务中所有的SQL均被解析并执行后，事务中可能存在数个分支事务组，每个分支事务组中也可能存在数个分支事务，如下图：
最后当用户提交事务时，Saga引擎按照分支事务组的顺序，使用其中分支事务的路由SQL进行重试或反向SQL进行回滚。</description>
    </item>
    
  </channel>
</rss>