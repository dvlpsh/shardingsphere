package test;

import io.shardingsphere.parser.antlr.PostgreStatementLexer;
import io.shardingsphere.parser.antlr.PostgreStatementParser;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CodePointCharStream;
import org.antlr.v4.runtime.CommonTokenStream;

/**
 * @author maxiaoguang
 */
public class PostgreCreateTableTest {
    
    public static void main(String[] args) throws Exception {
        String[] createTables = {
                "CREATE TABLE films (\n" +
                        "    code        char(5) CONSTRAINT firstkey PRIMARY KEY,\n" +
                        "    title       varchar(40) NOT NULL,\n" +
                        "    did         integer NOT NULL,\n" +
                        "    date_prod   date,\n" +
                        "    kind        varchar(10),\n" +
                        "    len         interval hour to minute\n" +
                        ")",
                
                "CREATE TABLE distributors (\n" +
                        "     did    integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n" +
                        "     name   varchar(40) NOT NULL CHECK (name <> '')\n" +
                        ")",
                
                "CREATE TABLE array_int (\n" +
                        "    vector  int[][]\n" +
                        ")",
                
                "CREATE TABLE films (\n" +
                        "    code        char(5),\n" +
                        "    title       varchar(40),\n" +
                        "    did         integer,\n" +
                        "    date_prod   date,\n" +
                        "    kind        varchar(10),\n" +
                        "    len         interval hour to minute,\n" +
                        "    CONSTRAINT production UNIQUE(date_prod)\n" +
                        ")",
                
                "CREATE TABLE distributors (\n" +
                        "    did     integer CHECK (did > 100),\n" +
                        "    name    varchar(40)\n" +
                        ")",
                
                "CREATE TABLE distributors (\n" +
                        "    did     integer,\n" +
                        "    name    varchar(40),\n" +
                        "    CONSTRAINT con1 CHECK (did > 100 AND name <> '')\n" +
                        ")",
        
                "CREATE TABLE films (\n" +
                        "    code        char(5),\n" +
                        "    title       varchar(40),\n" +
                        "    did         integer,\n" +
                        "    date_prod   date,\n" +
                        "    kind        varchar(10),\n" +
                        "    len         interval hour to minute,\n" +
                        "    CONSTRAINT code_title PRIMARY KEY(code,title)\n" +
                        ")",
        
                "CREATE TABLE distributors (\n" +
                        "    did     integer,\n" +
                        "    name    varchar(40),\n" +
                        "    PRIMARY KEY(did)\n" +
                        ")",
        
                "CREATE TABLE distributors (\n" +
                        "    did     integer PRIMARY KEY,\n" +
                        "    name    varchar(40)\n" +
                        ")",
        
                "CREATE TABLE distributors (\n" +
                        "    name      varchar(40) DEFAULT 'Luso Films',\n" +
                        "    did       integer DEFAULT nextval('distributors_serial'),\n" +
                        "    modtime   timestamp DEFAULT current_timestamp\n" +
                        ")",
        
                "CREATE TABLE distributors (\n" +
                        "    did     integer CONSTRAINT no_null NOT NULL,\n" +
                        "    name    varchar(40) NOT NULL\n" +
                        ")",
        
                "CREATE TABLE distributors (\n" +
                        "    did     integer,\n" +
                        "    name    varchar(40) UNIQUE\n" +
                        ")",
        
                "CREATE TABLE distributors (\n" +
                        "    did     integer,\n" +
                        "    name    varchar(40),\n" +
                        "    UNIQUE(name)\n" +
                        ")",
        
                "CREATE TABLE distributors (\n" +
                        "    did     integer,\n" +
                        "    name    varchar(40),\n" +
                        "    UNIQUE(name) WITH (fillfactor=70)\n" +
                        ")\n" +
                        "WITH (fillfactor=70)",
        
                "CREATE TABLE circles (\n" +
                        "    c circle,\n" +
                        "    EXCLUDE USING gist (c WITH &&)\n" +
                        ")",
        
                "CREATE TABLE cinemas (\n" +
                        "        id serial,\n" +
                        "        name text,\n" +
                        "        location text\n" +
                        ") TABLESPACE diskvol1",
        
                "CREATE TABLE employees OF employee_type (\n" +
                        "    PRIMARY KEY (name),\n" +
                        "    salary WITH OPTIONS DEFAULT 1000\n" +
                        ")",
        
                "CREATE TABLE measurement (\n" +
                        "    logdate         date not null,\n" +
                        "    peaktemp        int,\n" +
                        "    unitsales       int\n" +
                        ") PARTITION BY RANGE (logdate)",
        
//                "CREATE TABLE measurement_year_month (\n" +
//                        "    logdate         date not null,\n" +
//                        "    peaktemp        int,\n" +
//                        "    unitsales       int\n" +
//                        ") PARTITION BY RANGE (EXTRACT(YEAR FROM logdate), EXTRACT(MONTH FROM logdate))",
//
//                "CREATE TABLE cities (\n" +
//                        "    city_id      bigserial not null,\n" +
//                        "    name         text not null,\n" +
//                        "    population   bigint\n" +
//                        ") PARTITION BY LIST (left(lower(name), 1))",
        
                "CREATE TABLE measurement_y2016m07\n" +
                        "    PARTITION OF measurement (\n" +
                        "    unitsales DEFAULT 0\n" +
                        ") FOR VALUES FROM ('2016-07-01') TO ('2016-08-01')",
        
                "CREATE TABLE measurement_ym_older\n" +
                        "    PARTITION OF measurement_year_month\n" +
                        "    FOR VALUES FROM (MINVALUE, MINVALUE) TO (2016, 11)",
        
                "CREATE TABLE measurement_ym_y2016m11\n" +
                        "    PARTITION OF measurement_year_month\n" +
                        "    FOR VALUES FROM (2016, 11) TO (2016, 12)",
        
                "CREATE TABLE measurement_ym_y2016m12\n" +
                        "    PARTITION OF measurement_year_month\n" +
                        "    FOR VALUES FROM (2016, 12) TO (2017, 01)",
        
                "CREATE TABLE measurement_ym_y2017m01\n" +
                        "    PARTITION OF measurement_year_month\n" +
                        "    FOR VALUES FROM (2017, 01) TO (2017, 02)",
        
                "CREATE TABLE cities_ab\n" +
                        "    PARTITION OF cities (\n" +
                        "    CONSTRAINT city_id_nonzero CHECK (city_id != 0)\n" +
                        ") FOR VALUES IN ('a', 'b')",
        
                "CREATE TABLE cities_ab\n" +
                        "    PARTITION OF cities (\n" +
                        "    CONSTRAINT city_id_nonzero CHECK (city_id != 0)\n" +
                        ") FOR VALUES IN ('a', 'b') PARTITION BY RANGE (population)",
        
                "CREATE TABLE cities_ab_10000_to_100000\n" +
                        "    PARTITION OF cities_ab FOR VALUES FROM (10000) TO (100000)"
        };
    
        for (String createTable : createTables) {
//            System.out.println("Input expr : " + createTable);
            createTable(createTable);
        }
    }
    
    public static void createTable(String expr) throws Exception{
        CodePointCharStream cs = CharStreams.fromString(expr);
        PostgreStatementLexer lexer = new PostgreStatementLexer(cs);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        PostgreStatementParser parser = new PostgreStatementParser(tokens);
        parser.execute();
    }
    
}
